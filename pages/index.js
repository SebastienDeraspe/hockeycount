import Head from 'next/head';
import Image from 'next/image';
import { useState, useEffect, useRef } from 'react';
import styles from '../styles/Home.module.css'
import { useRouter } from 'next/router';
import { getDatabase, onValue, ref } from 'firebase/database';
import TagManager from 'react-gtm-module'


import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyDpwZGTV9_dQbGk04KrOmW_UPe8Nt6Gy1U",
  authDomain: "hockeycount.firebaseapp.com",
  databaseURL: "https://hockeycount-default-rtdb.firebaseio.com",
  projectId: "hockeycount",
  storageBucket: "hockeycount.appspot.com",
  messagingSenderId: "488246008787",
  appId: "1:488246008787:web:ec5d779ed4f30ef5132d26",
  measurementId: "G-6DNN2BPN2K"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
// onValue(distanceRef, (snapshot) => { 
//   const data = snapshot.val();
//   updateDistance(postelement, data);
// })

// console.log(data);



export default function Home(props) {

  useEffect(()=>{
    TagManager.initialize({gtmId: 'G-6DNN2BPN2K'})
  },[]);
  

  const router = useRouter();
//  console.log(router);
const [periode, setPeriode] = useState(1);
const [game, setGame] = useState({
  gameID: 1,
  1: {
    tir: 0,
    tirContre: 0,
    but: 0,
    butContre: 0,
  },
  2: {
    tir: 0,
    tirContre: 0,
    but: 0,
    butContre: 0,
  },
  3: {
    tir: 0,
    tirContre: 0,
    but: 0,
    butContre: 0,
  }
});


  function CountData(action) {
    action.preventDefault();
    const  currentTire = tirInputRef.current.value;
  };

 console.log(game);

 let firstPeriode = null;
 let secondPeriode = null;
 let thirtPeriode = null;

 switch (periode) {
  case 1:
    firstPeriode = styles.periodeOn;
    break;
  case 2:
    secondPeriode = styles.periodeOn;
    break;
  case 3:
    thirtPeriode = styles.periodeOn;
    break;
}

  // function gameAction(periode, action) {

  //     setGame({
  //       ...game,
  //       [1]: {
  //         ...game[1],
  //         tir: game[1].tir + 1
  //     }
  //   })
  // };

  return (
    <div className={styles.container}>
      <Head>
        <title>Hockey Count</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
{/*      Game ID : {game.gameID}<br/>
      Game Periode : {periode} */}
      <main className={styles.main}>
          <div className={styles.colonne} >        
             <button className={styles.pushable} onClick={() => setGame({
                ...game,
                [periode]: {
                  ...game[periode],
                  tir: game[periode].tir + 1
                }
            })
            }>
                <span className={styles.shadow}></span>
                <span className={styles.edge} ></span>
                <span className={styles.front} >+ Shot</span>
              </button> 
              <button className={styles.pushable} disabled={ game[periode].tir == 0 ? 'true' : '' } onClick={() => setGame({
                ...game,
                [periode]: {
                  ...game[periode],
                  tir: game[periode].tir - 1
                }
            })
            }>
                <span className={styles.shadow}></span>
                <span className={styles.edge} ></span>
                <span className={styles.front} >- Shot</span>
              </button>                         
          </div>
          <div className={styles.colonne} >        
          <button className={styles.pushable}  onClick={() => setGame({
                ...game,
                [periode]: {
                  ...game[periode],
                  tirContre: game[periode].tirContre + 1
                }
            })}>
                <span className={styles.shadow}></span>
                <span className={styles.edge} ></span>
                <span className={styles.front} >+ Shot against</span>              
               </button>
            <button className={styles.pushable} disabled={ game[periode].tirContre == 0 ? 'true' : '' }  onClick={() => setGame({
                ...game,
                [periode]: {
                  ...game[periode],
                  tirContre: game[periode].tirContre - 1
                }
            })}>
                <span className={styles.shadow}></span>
                <span className={styles.edge} ></span>
                <span className={styles.front} >- Shot against</span>              
               </button>      
          </div>
            <div className={styles.colonne} >        
            <button className={styles.pushable} onClick={() => setGame({
                ...game,
                [periode]: {
                  ...game[periode],
                  but: game[periode].but + 1
                }
            })}>
                <span className={styles.shadow}></span>
                <span className={styles.edge} ></span>
                <span className={styles.front} >+ Goal</span>
              </button> 
              <button className={styles.pushable} disabled={ game[periode].but == 0 ? 'true' : '' } onClick={() => setGame({
                ...game,
                [periode]: {
                  ...game[periode],
                  but: game[periode].but - 1
                }
            })}>
                <span className={styles.shadow}></span>
                <span className={styles.edge} ></span>
                <span className={styles.front} >- Goal</span>
              </button> 

          </div>
          <div className={styles.colonne} >        
          <button className={styles.pushable} onClick={() => setGame({
                ...game,
                [periode]: {
                  ...game[periode],
                  butContre: game[periode].butContre + 1
                }
            })}>
                <span className={styles.shadow}></span>
                <span className={styles.edge} ></span>
                <span className={styles.front} >+ Goal against</span>
              </button>
              <button className={styles.pushable} disabled={ game[periode].butContre == 0 ? 'true' : '' } onClick={() => setGame({
                ...game,
                [periode]: {
                  ...game[periode],
                  butContre: game[periode].butContre - 1
                }
            })}>
                <span className={styles.shadow}></span>
                <span className={styles.edge} ></span>
                <span className={styles.front} >- Goal against</span>
              </button>    
          </div>
          <div class={styles.wrapperData}>
          <div className={styles.resultat}>
            <div className={`${styles.CountData} ${styles.alignleft}`}></div>  
            <div className={`${styles.CountData} ${firstPeriode}`}>Period 1</div>  
            <div className={`${styles.CountData} ${secondPeriode}`}>Period 2</div>  
            <div className={`${styles.CountData} ${thirtPeriode}`}>Period 3</div>                        
            <div className={`${styles.CountData}`}>total</div>                        
          </div>  

          <div className={styles.resultat}>
            <div className={`${styles.CountData} ${styles.alignleft}`}>Shot</div>
            <div className={`${styles.CountData} ${firstPeriode}`}>{game[1].tir}</div>
            <div className={`${styles.CountData} ${secondPeriode}`}>{game[2].tir}</div>
            <div className={`${styles.CountData} ${thirtPeriode}`}>{game[3].tir}</div>
            <div className={`${styles.CountData}`}>{game[1].tir + game[2].tir + game[3].tir }</div>
          </div>
          <div className={styles.resultat}>
            <div className={`${styles.CountData} ${styles.alignleft}`}>Shot against</div>
            <div className={`${styles.CountData} ${firstPeriode}`}>{game[1].tirContre}</div>
            <div className={`${styles.CountData} ${secondPeriode}`}>{game[2].tirContre}</div>
            <div className={`${styles.CountData} ${thirtPeriode}`}>{game[3].tirContre}</div>
            <div className={`${styles.CountData}`}>{game[1].tirContre + game[2].tirContre + game[3].tirContre }</div>
          </div>

          <div className={styles.resultat}>
            <div className={`${styles.CountData} ${styles.alignleft}`}>Goal</div>
            <div className={`${styles.CountData} ${firstPeriode}`}>{game[1].but}</div>
            <div className={`${styles.CountData} ${secondPeriode}`}>{game[2].but}</div>
            <div className={`${styles.CountData} ${thirtPeriode}`}>{game[3].but}</div>
            <div className={`${styles.CountData}`}>{game[1].but + game[2].but + game[3].but }</div>
          </div>
          <div className={styles.resultat}>
            <div className={`${styles.CountData} ${styles.alignleft}`}>Goal against</div>
            <div className={`${styles.CountData} ${firstPeriode}`}>{game[1].butContre}</div>
            <div className={`${styles.CountData} ${secondPeriode}`}>{game[2].butContre}</div>
            <div className={`${styles.CountData} ${thirtPeriode}`}>{game[3].butContre}</div>
            <div className={`${styles.CountData}`}>{game[1].butContre + game[2].butContre + game[3].butContre }</div>
          </div>
          </div>  
          <div className={styles.resultat}>
          <div className={styles.CountData}></div>
            <div className={styles.CountData}>
                <button className={styles.pushable} onClick={() => setPeriode(1)}>
                  <span className={styles.shadow}></span>
                  <span className={styles.edge} ></span>
                  <span className={styles.front} >1</span>
                </button>
            </div>
            <div className={styles.CountData}>
            <button className={styles.pushable} onClick={() => setPeriode(2)}>
                  <span className={styles.shadow}></span>
                  <span className={styles.edge} ></span>
                  <span className={styles.front} >2</span>
                </button>
            </div>
            <div className={styles.CountData}>
              <button className={styles.pushable} onClick={() => setPeriode(3)}>
                  <span className={styles.shadow}></span>
                  <span className={styles.edge} ></span>
                  <span className={styles.front} >3</span>
                </button>
            </div>
            <div className={styles.CountData}></div>
          </div>

      </main>
    </div>
  )
}